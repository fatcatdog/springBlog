//@Author: Jacob Duchen
//upvote controller does have CRUD functionality 

package com.jacob.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import com.jacob.model.Blog;
import com.jacob.model.Upvote;
import com.jacob.model.User;

import com.jacob.jdbcService.BlogService;
import com.jacob.jdbcService.CommentService;
import com.jacob.jdbcService.UpvoteService;
import com.jacob.jdbcService.UserService;

@Controller
@RequestMapping("vote")
public class UpvoteController {
	
	 @Autowired
	 private BlogService blogService;
	 
	 @Autowired
	 private UserService userService;
	 
	 @Autowired 
	 private UpvoteService upvoteService; 
	 
	 @Autowired
	 private CommentService commentService;
	 
	 private User getCurrentAuthUser() {
		  //this variable will be used to get current user Authentication(where we can get there user id from) from spring security 
		 Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		 
		 //getting user object from spring security Authentication object 
		  User tempUser = userService.findUserByEmail(auth.getName());
		 return tempUser;
	 }

	 //upvote method
	 @RequestMapping(value = "up/{id}", method=RequestMethod.GET)
	 public ModelAndView createUpvote(@PathVariable(value = "id",  required =false) int id) {
		 
		  User tempUser = getCurrentAuthUser();

		  ModelAndView model = new ModelAndView();
		  
		  //getting blog from our path variable blog id 
		  Blog tempBlog =  blogService.getBlog(id);

		  //getting all comments related to our blog to display
		  //this can be refactored as we have the same functionality in view/blog
		  List<String> blogComments = commentService.getContentOfCommentsForABlog(tempBlog.getId());

	
		  User author = userService.findUserById(tempBlog.getAuthor_id());
		 
		  model.addObject("blogObject", tempBlog);
		  model.addObject("blogId", tempBlog.getId());
		  model.addObject("authorName", author.getFirstname() + " " + author.getLastname());
		  model.addObject("authorEmail", author.getEmail());
		  model.addObject("title", tempBlog.getTitle());
		  model.addObject("content", tempBlog.getContent());
	  
		  //if user has not already upvoted on blog, we save upvote 
		  if(!upvoteService.checkIfUserHasVotedOnThisBlogYet(tempUser.getId(), id)) {
			  Upvote tempUpvote = new Upvote(); 
			  tempUpvote.setAuthor_id(tempUser.getId());
			  tempUpvote.setBlog_id(id);
			
			  upvoteService.saveUpvote(tempUpvote);
			  model.addObject("tempUpvoteCount", upvoteService.countUpvotes(id));			  
		  } else {
			  //if user already upvoted, we dont save upvote
			  model.addObject("tempUpvoteCount", upvoteService.countUpvotes(id));			  
		  }

		  //getting appropriate information for view if we have no comments
		  if(blogComments.size() == 0) {
			  model.addObject("commentListEmpty", "Sorry there are no comments as of now :(");
			  model.addObject("listOfCommentsSize", blogComments.size());
		  } else {
			  //if we have comments, we pull info out of comments to pass to view
			  List<String> commentsAuthors = commentService.getAuthorsOfCommentsForABlog(id);
			  model.addObject("ourCommentAuthors", commentsAuthors);
			  model.addObject("comments", blogComments);
			  model.addObject("listOfCommentsSize", blogComments.size());
		  }
		  //returning view
		  return new ModelAndView("redirect:/blog/" + id);
	 }
	 
	 //lots of duplicate code to be refactored here (sharing code with up method
	 @RequestMapping(value = "down/{id}", method=RequestMethod.GET)
	 public ModelAndView createDownVote(@PathVariable(value = "id",  required =false) int id) {
		 
		 //getting current user from Spring Security 
		  User tempUser = getCurrentAuthUser();
		  
		  Blog tempBlog =  blogService.getBlog(id);

		  //if user has an upvote on this blog, we allow the user to delete upvote
		  if(upvoteService.checkIfUserHasVotedOnThisBlogYet(tempUser.getId(), id)) {

			int ourIdToDelete = upvoteService.getUserUpvoteByUserIdAndBlogId(tempUser.getId(), tempBlog.getId());
			
			upvoteService.deleteUpvote(ourIdToDelete);		  
		  } 
	  

	  return new ModelAndView("redirect:/blog/" + id);

	 }
	
}
