package com.jacob.dao;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.jacob.model.Upvote;

@Transactional
@Repository
public class CommentDAO {
    private final JdbcTemplate jdbcTemplate;
    
    @Autowired
    public CommentDAO(JdbcTemplate jdbcTemplate) {
	  this.jdbcTemplate = jdbcTemplate;
    }
    
	public Upvote getUpvote(int id) {
		String sql = "SELECT id, author_id, blog_id FROM upvote WHERE id = ?";
   	 	RowMapper<Upvote> rowMapper = new BeanPropertyRowMapper<Upvote>(Upvote.class);
		 Upvote upvote = jdbcTemplate.queryForObject(sql, rowMapper, id);
		return upvote; 
	}

    public void saveUpvote(Upvote upvote) {
		String sql = "INSERT INTO upvote (id, author_id, blog_id) values (?, ?, ?)";
	   jdbcTemplate.update(sql, upvote.getId(), upvote.getAuthor_id(), upvote.getBlog_id());    	
    }
    
	public List<Upvote> getAllUpvotesForABlog(int id){
		String sql = "SELECT id, author_id, blog_id FROM upvote WHERE blog_id = ? ";
    	RowMapper<Upvote> rowMapper = new BeanPropertyRowMapper<Upvote>(Upvote.class);
  	   return this.jdbcTemplate.query(sql, rowMapper, id);
	}
	
	
    
}
