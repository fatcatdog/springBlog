package com.jacob.dao;

import java.util.Arrays;
import java.util.HashSet;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.jacob.model.Role;
import com.jacob.model.User;

@Transactional
@Repository
public class UserDAO {
    private final JdbcTemplate jdbcTemplate;
    
    @Autowired
    private BCryptPasswordEncoder bCryptPasswordEncoder;

    @Autowired
    public UserDAO(JdbcTemplate jdbcTemplate) {
	  this.jdbcTemplate = jdbcTemplate;
    }
    
	 public User findUserByEmail(String email) {
			String sql = "SELECT id, email, firstname, lastname, password, active FROM user WHERE email = ?";
	    	 RowMapper<User> rowMapper = new BeanPropertyRowMapper<User>(User.class);
			 User user = jdbcTemplate.queryForObject(sql, rowMapper, email);
			return user; 
	 }
	 
	 public boolean checkIfEmailIsInDb(String email) {
		 	boolean result = false; 
			String sql = "SELECT count(*) FROM user WHERE email = ?";
			int count = jdbcTemplate.queryForObject(sql, new Object[] { email }, Integer.class);
		    if (count > 0) {
		      result = true;
		    }  
		 return result; 
	 }

	 
	 public User findUserById(int id) {
			String sql = "SELECT id, email, firstname, lastname, password, active FROM user WHERE id = ?";
	    	 RowMapper<User> rowMapper = new BeanPropertyRowMapper<User>(User.class);
			 User user = jdbcTemplate.queryForObject(sql, rowMapper, id);
			return user; 
	 }
	 
	 public int getANewId() {
		 String sql = "SELECT MAX(id) from user";
		 int number = jdbcTemplate.queryForObject(sql, Integer.class);
		 return (number + 1); 
	 }
	 
	 public void saveUser(User user) {
		 
		 System.out.println("userDAO info: :)");
		 System.out.println(user.getActive());
		 System.out.println(user.getId());
		 System.out.println(user.getFirstname());
		 System.out.println(user.getLastname());
		 System.out.println(user.getEmail());
		 System.out.println(user.getPassword());
		 
		 user.setPassword(bCryptPasswordEncoder.encode(user.getPassword()));
		 System.out.println(user.getPassword());

		 user.setActive(1);
		 Role userRole = roleRespository.findByRole("ADMIN");

		 user.setRoles(new HashSet<Role>(Arrays.asList(userRole)));

		  String sql = "INSERT INTO user (id, email, firstname, lastname, password, active) values (?, ?, ?, ?, ?, ?)";
		  jdbcTemplate.update(sql, getANewId(), user.getEmail(), user.getFirstname(), user.getLastname(), user.getPassword(),  user.getActive());
		  
		  String roleSql = "INSERT INTO user_role (id, 1) values (?, ?)";
	 }

}
